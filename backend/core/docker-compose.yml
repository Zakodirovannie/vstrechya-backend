services:
  django: &django
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: backend
    command: gunicorn -c gunicorn_config.py
    volumes:
      - .:/usr/src/app
    ports:
      - "8010:8010"
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_HOST
      - POSTGRES_PORT
      - EMAIL_USER
      - EMAIL_PASSWORD
      - SECRET_KEY
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - ALLOWED_HOSTS
      - DEBUG
    depends_on:
      pgdb:
        condition: service_healthy

  pgdb:
    image: postgres:16.3-alpine
    restart: always
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
    container_name: pgdb
    volumes:
      - pgdbdata:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "$POSTGRES_DB", "-U", "$POSTGRES_USER" ]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"

  redis-qoovee:
    image: redis:7.0-alpine
    restart: always
    ports:
      - "6379:6379"

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    hostname: worker
    restart: always
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - CELERY_BROKER_URL=redis://redis-qoovee/1
      - CELERY_RESULT_BACKEND=redis://redis-qoovee/1
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgdb:5432/${POSTGRES_DB}
    entrypoint: [ "sh", "-c", "celery -A core.celery worker -n vstrechyaworker --loglevel=info" ]
    volumes:
      - .:/usr/src/app
    links:
      - redis-qoovee
    depends_on:
      - redis-qoovee
      - pgdb
      - django

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    hostname: beat
    restart: always
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - CELERY_BROKER_URL=redis://redis-qoovee/1
      - CELERY_RESULT_BACKEND=redis://redis-qoovee/1
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgdb:5432/${POSTGRES_DB}
    entrypoint: [ "sh", "-c", "celery -A core.celery beat --loglevel=info" ]
    volumes:
      - .:/usr/src/app
    links:
      - redis-qoovee
    depends_on:
      - redis-qoovee
      - pgdb
      - django

  flower:
    build:
      context: .
      dockerfile: Dockerfile.prod
    hostname: flower
    restart: always
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - CELERY_BROKER_URL=redis://redis-qoovee/1
      - CELERY_RESULT_BACKEND=redis://redis-qoovee/1
      - FLOWER_PORT=5555
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgdb:5432/${POSTGRES_DB}
    entrypoint: [ "sh", "-c", "celery -A core.celery flower" ]
    volumes:
      - .:/usr/src/app
    links:
      - redis-qoovee
    depends_on:
      - redis-qoovee
      - pgdb
      - django
    ports:
      - "5555:5555"

#  grafana:
#    image: grafana/grafana:latest
#    ports:
#      - "3333:3000"
#    volumes:
#      - grafana_data:/var/lib/grafana
#
#  prometheus:
#    image: prom/prometheus:latest
#    ports:
#      - "9090:9090"
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--web.enable-lifecycle'
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#      - prometheus_data:/prometheus

volumes:
  pgdbdata: null
  static_volume:
  media_volume:
#  grafana_data:
#  prometheus_data:
